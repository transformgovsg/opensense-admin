//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().Superuser?[userId == auth().id])
/// @@allow('read', auth().admins?[true])
/// @@allow('create', auth() != null)
/// @@deny('all', auth() == null)
model User {
  id           String              @id() @default(cuid()) @map("id")
  remoteId     String              @map("remote_id")
  email        String              @unique() @map("email")
  memberships  Membership[]
  accessRights DataSourceAccess[]
  Superuser    Superuser[]
  admins       OrganizationAdmin[]
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @default(now()) @updatedAt() @map("updated_at")

  @@index([email], type: Hash)
  @@index([remoteId], type: Hash)
  @@map("users")
}

/// @@allow('all', auth().Superuser?[userId == auth().id])
model Superuser {
  id        String   @id() @default(cuid()) @map("id")
  userId    String   @unique() @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("superusers")
}

/// @@allow('all', auth().Superuser?[userId == auth().id] || organization.organizationAdmins?[userId == auth().id])
/// @@deny('all', auth() == null)
model OrganizationAdmin {
  id             String       @id() @default(cuid()) @map("id")
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @updatedAt() @map("updated_at")

  @@unique([userId, organizationId])
  @@map("organization_admins")
}

/// @@allow('create', auth().Superuser?[userId == auth().id])
/// @@allow('read,update,delete', auth().Superuser?[userId == auth().id] || organizationAdmins?[userId == auth().id])
/// @@deny('all', auth() == null)
model Organization {
  id                  String                @id() @default(cuid()) @map("id")
  name                String                @map("name")
  members             Membership[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @updatedAt() @map("updated_at")
  organizationAdmins  OrganizationAdmin[]
  DataSourceOwnership DataSourceOwnership[]

  @@map("organizations")
}

/// @@allow('all', auth().Superuser?[userId == auth().id] || organization.organizationAdmins?[userId == auth().id])
/// @@deny('all', auth() == null)
model Membership {
  id             String       @id() @default(cuid()) @map("id")
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @updatedAt() @map("updated_at")

  @@unique([userId, organizationId])
  @@map("memberships")
}

/// @@allow('all', auth().Superuser?[userId == auth().id])
/// @@allow('all', auth().admins?[organization.DataSourceOwnership?[dataSourceId == dataSourceId]])
/// @@deny('all', auth() == null)
model DataSourceAccess {
  id           String   @id() @default(cuid()) @map("id")
  dataSourceId Int      @map("data_source_id")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt() @map("updated_at")

  @@unique([dataSourceId, userId])
  @@map("data_source_accesses")
}

/// @@allow('read', organization.organizationAdmins?[userId == auth().id])
/// @@allow('all', auth().Superuser?[userId == auth().id])
/// @@deny('all', auth() == null)
model DataSourceOwnership {
  id             String       @id() @default(cuid()) @map("id")
  dataSourceId   Int          @unique() @map("data_source_id")
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt() @map("updated_at")

  @@index([dataSourceId], type: Hash)
  @@index([organizationId], type: Hash)
  @@map("data_source_ownership")
}

/// @@allow('create, read', auth().Superuser?[userId == auth().id] || auth().admins?[true])
/// @@deny('all', auth() == null)
model AuditLog {
  id          String   @id() @default(cuid()) @map("id")
  recordId    String   @map("record_id")
  recordTitle String?  @map("record_title") @db.VarChar(128)
  difference  Json?    @map("difference") @db.Json()
  action      String   @map("action") @db.VarChar(128)
  resource    String   @map("resource") @db.VarChar(128)
  userId      String   @map("user_id") @db.VarChar(128)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt() @map("updated_at")

  @@index([createdAt], type: BTree)
  @@map("audit_log")
}
